{
  // Place your niceintra workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  "React Component": {
    "scope": "typescriptreact",
    "prefix": "component",
    "description": "Creates a React component without props, without importing React, due to NextJS",
    "body": [
      "$0",
      "export const ${TM_FILENAME/^([^.]+).*/${1:/pascalcase} = () => {",
      "\treturn (",
      "\t\t$1",
      "\t);",
      "}"
    ]
  },
  "React Component with Props": {
    "scope": "typescriptreact",
    "prefix": "component_props",
    "description": "Creates a React component with props, without importing React, due to NextJS",
    "body": [
      "",
      "type Props = {",
      "\t$1",
      "}",
      "",
      "$0",
      "export const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = ({$2}: Props) => {",
      "\treturn (",
      "\t\t$3",
      "\t);",
      "}"
    ]
  },
  "Next Page": {
    "scope": "typescriptreact",
    "prefix": "page",
    "description": "Creates a barebone Next page, without importing React, due to NextJS",
    "body": [
      "$0",
      "const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = () => {",
      "\treturn (",
      "\t\t$1",
      "\t);",
      "}",
      "",
      "export default ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/};"
    ]
  },
  "Next Static Generated Page": {
    "scope": "typescriptreact",
    "prefix": "page_ssg",
    "description": "Creates a Static Next page with Props, Static Props and Static Paths, without importing React, due to NextJS",
    "body": [
      "import { GetStaticPaths, GetStaticProps } from 'next';",
      "",
      "export const getStaticProps: GetStaticProps = async ({}) => {",
      "",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\t$1",
      "\t\t}",
      "\t}",
      "}",
      "",
      "export const getStaticPaths: GetStaticPaths = async ({}) => {",
      "",
      "\tconst paths = [$2].map((_i) => ({",
      "\t\tparams: { },",
      "\t}));",
      "",
      "\treturn {",
      "\t\tpaths,",
      "\t\t//\"fallback: false\" means invalid routes will result in HTTP 404",
      "\t\tfallback: false",
      "\t}",
      "}",
      "",
      "type Props = {",
      "\t$3",
      "}",
      "",
      "$0",
      "const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = ({$4}: Props) => {",
      "\treturn (",
      "\t\t$5",
      "\t);",
      "}",
      "",
      "export default ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/};"
    ]
  },
  "Next Server Side Rendered Page": {
    "scope": "typescriptreact",
    "prefix": "page_ssr",
    "description": "Creates a Server Side Rendered Next page with Props and Server Side Props, without importing React, due to NextJS",
    "body": [
      "import { GetServerSideProps } from 'next';",
      "",
      "export const getServerSideProps: GetServerSideProps = async ({}) => {",
      "",
      "\treturn {",
      "\t\tprops: {",
      "\t\t\t$1",
      "\t\t}",
      "\t}",
      "}",
      "",
      "type Props = {",
      "\t$2",
      "}",
      "",
      "$0",
      "const ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/} = ({$3}: Props) => {",
      "\treturn (",
      "\t\t$4",
      "\t);",
      "}",
      "",
      "export default ${TM_FILENAME/(.*?)\\..+/${1:/pascalcase}/};"
    ]
  }
}
